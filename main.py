from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime
import os
from dotenv import load_dotenv
from database import DatabaseManager
from models_ai.chatGPT4 import ChatGPT4Model
from models_ai.prompts_ai import NumerologyPrompts
from states import LifePathStates, CompatibilityStates, NumerologyStates

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

gpt_model = ChatGPT4Model()
db_manager = DatabaseManager()


@dp.message(Command('start'))
async def start(message: types.Message):
    await message.answer(
        text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò!\n\n"
              "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.\n\n "
             "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
             "/life_path - üîÆ –£–∑–Ω–∞—Ç—å —Å–≤–æ—ë —á–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏\n"
             "/compatibility - ‚ù§Ô∏è –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
             "/numerology_question - ü§î –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω—É–º–µ—Ä–æ–ª–æ–≥—É\n"
             "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n"
    )

@dp.message(Command('help'))
async def help_command(message: types.Message):
    await message.answer(
        text="üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
             "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
             "/life_path - üîÆ –£–∑–Ω–∞—Ç—å —Å–≤–æ—ë —á–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏\n"
             "/compatibility - ‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n"
             "/numerology_question - ü§î –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω—É–º–µ—Ä–æ–ª–æ–≥—É\n\n"
             "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )


@dp.message(Command('life_path'))
async def life_path_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —á–∏—Å–ª–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.")
    await state.set_state(LifePathStates.WAITING_FOR_BIRTHDATE)


@dp.message(LifePathStates.WAITING_FOR_BIRTHDATE)
async def process_life_path_date(message: types.Message, state: FSMContext):
    date_text = message.text.strip()

    processing_message = await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

    try:
        date_obj = datetime.strptime(date_text, "%d.%m.%Y")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì.")
        await processing_message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        return

    if date_obj.year < 1950 or date_obj > datetime.now():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")
        await processing_message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        return

    prompt = NumerologyPrompts.get_life_path_prompt(date_text)
    response = gpt_model.get_response(date_text, prompt)
    db_manager.add_query(message.from_user.id, "life_path", date_text, response)
    await message.reply(f"–í–∞—à–µ —á–∏—Å–ª–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏: {response}")
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é.")  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await processing_message.delete()
    await state.clear()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏


@dp.message(Command('compatibility'))
async def compatibility_handler(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏ –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.")
    await state.set_state(CompatibilityStates.WAITING_FOR_DATES)


@dp.message(CompatibilityStates.WAITING_FOR_DATES)
async def process_compatibility_dates(message: types.Message, state: FSMContext):

    dates_text = message.text.strip().split(" –∏ ")
    processing_message = await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

    if len(dates_text) != 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ –¥–≤–µ –¥–∞—Ç—ã, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ '–∏', –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        await processing_message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        return

    date_objects = []

    for date_text in dates_text:
        date_text = date_text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

        try:
            date_obj = datetime.strptime(date_text, "%d.%m.%Y")

            if date_obj.year < 1900 or date_obj > datetime.now():
                await message.reply(f"–î–∞—Ç–∞ {date_text} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (—Å 1900 –≥–æ–¥–∞).")
                await processing_message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
                return

            date_objects.append(date_obj)
        except ValueError:
            await message.reply(f"–î–∞—Ç–∞ {date_text} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –≤–≤–æ–¥.")
            await processing_message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            return

    if len(date_objects) == 2:
        date1, date2 = dates_text[0], dates_text[1]
        prompt = NumerologyPrompts.get_compatibility_prompt(date1, date2)
        response = gpt_model.get_response(f"{date1} –∏ {date2}", prompt)

        db_manager.add_query(message.from_user.id, "compatibility", message.text, response)
        await message.reply(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {response}")

        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é.")  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

    await processing_message.delete()
    await state.clear()


@dp.message(Command('numerology_question'))
async def numerology_question_handler(message: types.Message, state: FSMContext):
    await message.reply("–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω—É–º–µ—Ä–æ–ª–æ–≥—É:")
    await state.set_state(NumerologyStates.WAITING_FOR_QUESTION)


@dp.message(NumerologyStates.WAITING_FOR_QUESTION)
async def process_numerology_question(message: types.Message, state: FSMContext):
    processing_message = await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    prompt = NumerologyPrompts.numerology_assistant_prompt
    response = gpt_model.get_response(message.text, prompt)
    db_manager.add_query(message.from_user.id, "numerology_question", message.text, response)
    await message.reply(response)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é.")  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await processing_message.delete()
    await state.clear()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏


@dp.message()
async def generic_question_handler(message: types.Message, state: FSMContext):
    if await state.get_state() is None:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é.")


if __name__ == "__main__":
    import asyncio

    async def main():
        await dp.start_polling(bot)  # –ü–µ—Ä–µ–¥–∞–µ–º bot –≤ –º–µ—Ç–æ–¥ start_polling

    asyncio.run(main())
